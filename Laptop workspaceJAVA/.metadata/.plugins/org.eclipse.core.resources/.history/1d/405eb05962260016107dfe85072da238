import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.io.RandomAccessFile;

/**
 *
 * @author Jung Hyun Choi (jhc229)
 * @version 05.23.2016
 */
public class DataBase {
	// ~ Fields
	private RandomAccessFile read = null;
	private long offset = 0;
	private long endOffset = 0;
	private FileWriter stat = null;
	// private Stats stat = null;

	// ~ Constructor
	/**
	 * Create a new DataBase object.
	 * 
	 * @throws IOException
	 */
	public DataBase(File gis, FileWriter result) throws IOException {
		read = new RandomAccessFile(gis, "r");
		stat = result;
		offset = read.readLine().length() + 1;
		
	}

	public void dataPrint() throws IOException {
		// offset = parserOffset;
		// System.out.println(" " + offset);
		while (read.readLine() != null) {

			System.out.println("	" + offset + "   " + id(offset));

			read.seek(offset);
			endOffset = offset;
			offset += read.readLine().length() + 1;
			// stat.append("\nshow classes: " + id);
		}
		// read.close();
	}

	/*
	 * Feature ID (FID) 
	 * non-negative integer
	 * unique identifier for this geographic feature
	 */
	public int id(long parserOffset) throws IOException {
		// offset = parserOffset;
		read.seek(parserOffset);
		String line = read.readLine();

		String[] items = line.split("\\|");
		int result = Integer.parseInt(items[0]);
		// System.out.println("delimiter: " + s.delimiter());
		// String token1 = s.next();
		return result;

	}

	/**
	 * Primary latitude (DMS) DDMMSS['N' | 'S'] 
	 * feature latitude in DMS format or UNKNOWN
	 * @param parserOffset
	 * @throws IOException
	 */
	public void latitude(long parserOffset) throws IOException {
		read.seek(parserOffset);
		// String line = read.readLine();
		String[] items = read.readLine().split("\\|");
		if (decLatitude(items[9]) == 0){
			stat.append("\n   Coordinate not given");
		}
		else if ((parserOffset >= offset) && (parserOffset <= endOffset)) {
			// read.seek(parserOffset);
			// String line = read.readLine();
			//String[] items = read.readLine().split("\\|");
			String direction = "" + items[7].charAt(items[7].length() - 1);
			switch (direction){
				case "N" :
					direction = "North";
					break;
				case "S" :
					direction = "South";
					break;
			}
			// int result = Integer.parseInt(items[0]);
			stat.append("\n   " + items[7].substring(0, 3) + "d " + items[7].substring(3, 5));
		} 
		else {
			stat.append("\n   Offset is not positive");
		}

	}

	public String longtitude(long parserOffset) {
		return null;
		// list = new SkipList<String, Rectangle>();
	}

	public String elevation(long parserOffset) {
		return null;
		// list = new SkipList<String, Rectangle>();
	}
	
	public int decLongitude(String lo) {
		return 0;
		// list = new SkipList<String, Rectangle>();
	}
	
	public int decLatitude(String lat) {
		return 0;
		// list = new SkipList<String, Rectangle>();
	}

	/**
	 * Feature name
	 * string
	 * standard name of feature
	 * @param parserOffset
	 */
	public void name(long parserOffset) {
		if ((parserOffset >= offset) && (parserOffset <= endOffset)) {
			read.seek(parserOffset);
			// String line = read.readLine();

			String[] items = read.readLine().split("\\|");
			// int result = Integer.parseInt(items[0]);
			stat.append("\n   " + items[1]);
		} else {
			stat.append("\n   Offset is not positive");
		}

	}

	/**
	 * Feature class
	 * string
	 * descriptive classification of feature
	 * @param parserOffset
	 * @return
	 */
	public String clsses(long parserOffset) {
		return null;
		// list = new SkipList<String, Rectangle>();
	}

	/**
	 * State alphabetic code
	 * two-characters
	 * US postal code abbreviation
	 * @param parserOffset
	 * @return
	 */
	public String postalCode(long parserOffset) {
		return null;
		// list = new SkipList<String, Rectangle>();
	}

	/**
	 * State numeric code
	 * non-negative integer
	 * numeric code for state
	 * @param parserOffset
	 * @return
	 */
	public int stateCode(long parserOffset) {
		return 0;
		// list = new SkipList<String, Rectangle>();
	}

	/**
	 * County name 
	 * string 
	 * county in which feature occurs
	 * @param parserOffset
	 * @return
	 */
	public String county(long parserOffset) {
		return null;
		// list = new SkipList<String, Rectangle>();
	}

	/**
	 * County numeric code 
	 * non-negative integer 
	 * numeric code for county
	 * @param parserOffset
	 * @return
	 */
	public String countyCode(long parserOffset) {
		return null;
		// list = new SkipList<String, Rectangle>();
	}

	
	public String quit() {
		return null;
		// list = new SkipList<String, Rectangle>();
	}

}