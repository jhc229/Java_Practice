import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
import java.io.RandomAccessFile;

/**
 *
 * @author Jung Hyun Choi (jhc229)
 * @version 05.23.2016
 */
public class DataBase
{
    // ~ Fields
    private RandomAccessFile read = null;
    private long offset = 0;
    private long endOffset = 0;
    //private Stats stat = null;


    // ~ Constructor
    /**
     * Create a new DataBase object.
     * @throws IOException 
     */
    public DataBase(File gis) throws IOException
    {
	read = new RandomAccessFile(gis, "r");
	offset = read.readLine().length() + 1;
    }

    public void dataPrint() throws IOException
    {
	//offset = parserOffset;
	//System.out.println("	" + offset);
	while (read.readLine() != null){

		System.out.println("	" + offset + "   " + id(offset));

		read.seek(offset);
		endOffset = offset;
		offset += read.readLine().length() + 1;
		//stat.append("\nshow classes:	" + id);
	}
	//read.close();
    }


    public int id(long parserOffset) throws IOException
    {
	//offset = parserOffset;
	read.seek(parserOffset);
	String line = read.readLine();
	
	String[] items = line.split("\\|");
	int result = Integer.parseInt(items[0]);
	//System.out.println("delimiter: " + s.delimiter());
	//String token1 = s.next();
	return result;

    }

    public String latitude(long parserOffset)
    {
	if((parserOffset >= offset) && (parserOffset <= endOffset)){
		read.seek(parserOffset);
//		String line = read.readLine();
	
		String[] items = read.readLine().split("\\|");
		
		//int result = Integer.parseInt(items[0]);
		stat.append("\n   " + items[1]);
	}
	else{
		stat.append("\n   Offset is not positive");
	}

    }

    public String longtitude(long parserOffset)
    {
		return null;
    //    list = new SkipList<String, Rectangle>();
    }

    public String elevation(long parserOffset)
    {
		return null;
        //list = new SkipList<String, Rectangle>();
    }

    public void name(long parserOffset)
    {
	if((parserOffset >= offset) && (parserOffset <= endOffset)){
		read.seek(parserOffset);
//		String line = read.readLine();
	
		String[] items = read.readLine().split("\\|");
		//int result = Integer.parseInt(items[0]);
		stat.append("\n   " + items[1]);
	}
	else{
		stat.append("\n   Offset is not positive");
	}

    }
    public String clsses(long parserOffset)
    {
		return null;
        //list = new SkipList<String, Rectangle>();
    }

    public String postalCode(long parserOffset)
    {
		return null;
        //list = new SkipList<String, Rectangle>();
    }

    public int stateCode(long parserOffset)
    {
		return null;
        //list = new SkipList<String, Rectangle>();
    }

    public String county(long parserOffset)
    {
		return null;
        //list = new SkipList<String, Rectangle>();
    }

    public String countyCode(long parserOffset)
    {
		return null;
        //list = new SkipList<String, Rectangle>();
    }

    public String quit()
    {
		return null;
        //list = new SkipList<String, Rectangle>();
    }



}